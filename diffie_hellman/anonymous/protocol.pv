(*
 * Protocol 1: Anonymous Diffie-Hellman
 *
 * Assume that:
 *
 *  - A and B are honest entities;
 *  - p is a large prime.
 *  - g is an element of order p-1 in Z^*_p (the cyclic group of elements
 *      relatively prime to p).
 *
 * NOTE: the *order* of an element g is the smallest i such that g^i is the
 * group identity (or, equivalently, the order of the subgroup generated by g).
 * The order of Z^*_p is p-1. Hence, g above is a *generator* of Z^*_p.
 *
 * 1. A chooses (uniformly) a random a in [1, p-1] and sends g^a (mod p) to B.
 * 2. B chooses (uniformly) a random b in [1, p-1] and sends g^b (mod p) to A.
 * 3. A computes K = (g^b)^a = g^ab.
 * 4. B computes K = (g^a)^b = g^ab.
 *
 * We would like to prove that the session key K is kept confidential, or find
 * a counterexample if that is not the case (spoiler: it is not the case).
 *)

type G. (* Group *)
type Z. (* Integer *)

(*
 * Constants are syntactic sugar for 0-ary functions.
 * [data] is not strictly necessary.
 *)
const g: G [data].

(*
 * Define Diffie-Hellman exponentiation.
 *
 * Note that exponentiation is defined abstractly, and only a limited number of
 * algebraic properties can be associated to the operation (in this example,
 * only commutativity of the exponents).
 *)
fun exp(G, Z): G.

(*
 * We model the commutativity of the exponents using an equation.
 *
 * NOTE: ProVerif always performs rewriting from left to right, in equations as
 * well as in destructors. I.e., it performs pattern matching on the left side
 * of the equation or reduction, and replaces the term with the right hand side
 * (suitably instantiated).
 *
 * NOTE: in general, using equations is more computationally expensive than
 * using destructors. When possible, prefer reduc to equation! (Here, it is not
 * possible, because there is no destructor to define).
 *)
equation forall x: Z, y: Z;
  exp(exp(g,x), y) = exp(exp(g,y), x).

(*
 * To test whether a session key k is really secret, we encrypt a message
 * with k and send it to the public channel. Since ProVerif's encryption is
 * perfect, the only way the attacker can recover m is by knowing k.
 *)
type Plaintext.
type Ciphertext.
type Key.

(*
 * Convenience functions. [typeConverter] functions are used to "bypass" the
 * type system, i.e., to cast a term into a different type. Again, this is just
 * a tool for the modeller: the attacker does not care about the types of the
 * messages (but see the `ignoreTypes` directive).
 *)
fun group2key(G): Key [typeConverter].

(*
 * The following declarations model perfect deterministic symmetric encryption.
 * Other models are possible (e.g. probabilistic ones).
 *)
fun enc(Plaintext, Key): Ciphertext.

reduc forall m: Plaintext, k: Key;
  dec(enc(m,k), k) = m.

(* Secret message *)
free m: Plaintext [private].

(*
 * Secrecy: is m kept confidential?
 *
 * The query is syntactic sugar for the following implication:
 *
 *     attacker(m) => false.
 *)
query attacker(m).

(*
 * We also want to make sure that the message can be received and decrypted
 * successfully. To this end, we may define an *event*, which is essentially a
 * "label" we can associate to a certain step in a process (see below). Then,
 * we can test, for instance, whether the event is reachable or not.
 *)

(* Declare a couple of events. As you can see, events can be parametrized. *)
event PSendsMessage(Key).
event QReveicesMessage(Key).

(*
 * Reachability query: is it true that the event is unreachable?
 * The query is syntactic sugar for the following implication:
 *
 *     event(QReveicesMessage(k)) => false.
 *)
query k: Key;
  event(QReveicesMessage(k)).

(*
 * We may also want to test that, for each message received by Q(), there is a
 * *distinct* event generated by P(). This is specified using injective
 * correspondences. If we are not interested in proving injection, the query
 * can be written as follows:
 *
 *     query k: Key;
 *       event(QReveicesMessage(k)) ==> event(PSendsMessage(k)).
 *
 * Generally speaking, injective correspondences tend to be more
 * computationally demanding than simple correspondences.
 *)
query k: Key;
  inj-event(QReveicesMessage(k)) ==> inj-event(PSendsMessage(k)).

(* The public channel *)
channel io.

(*
 * Process macros can be used to simplify the definitions of protocols. Here,
 * we define one process macro for each party. Process macros may be
 * parametrized, although the following macros have no parameters.
 *)
let P() =
  new a: Z;

  (* `let` assigns a name to a given term *)
  let g_a = exp(g,a) in

  (* Send g_a to the public channel *)
  out(io, g_a);

  (*
   * in() waits for an incoming message of the expected type.
   * It blocks the process until a message is received.
   *)
  in(io, y: G);

  let k = group2key(exp(y, a)) in

  (*
   * We mark the event of sending out a message encrypted with key k.
   * This must appear *before* out().
   *)
  event PSendsMessage(k);

  (* Send an encrypted message with the new key *)
  out(io, enc(m, k));
  0.

let Q() =
  in(io, x: G);
  new b: Z;
  let g_b = exp(g,b) in
  out(io, g_b);
  let k = group2key(exp(x, b)) in
  in(io, c: Ciphertext);
  if dec(c, k) = m then
    (*
     * We mark the event of having received and successfully decrypted a
     * message with key k. This must appear *after* in().
     *)
    event QReveicesMessage(k);
  0.

process
  P() | Q()

