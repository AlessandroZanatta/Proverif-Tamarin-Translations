theory Anonymous_DiffieHellman

begin
builtins: diffie-hellman, symmetric-encryption
 
/************/
/* Protocol */
/************/

rule Init:
    [ Fr(~idA)                                  // A id
    , Fr(~idB)                                  // B id
    ]
    -->
    [ AState(~idA, 'INIT', 'EMPTY_STATE')       // Create initial state for A
    , BState(~idB, 'INIT', 'EMPTY_STATE')       // Create initial state for B
    ]

rule A_1:
    [ AState(~idA, 'INIT', 'EMPTY_STATE')       // Recover state
    , Fr(~a) ]                                  // Generate secret parameter    
    --[ ASendsHalfKey(~idA, ~a) ]->             
    [ Out('g'^~a)                               // Send out half key
    , AState(~idA, 'SENT', ~a)                  // Save state
    ]

rule B_1:
    let 
        k = g_a ^ ~b                            // Symmetric encryption key (g^b^a = g^(ba))
    in
    [ BState(~idB, 'INIT', 'EMPTY_STATE')       // Recover state
    , In(g_a)                                   // Receive P's half key
    , Fr(~b)                                    // Generate secret parameter
    ]
  --[ BSendsHalfKey(~idB, ~b)
    , BInstallsKey(~idB, k)                     // MAYBE: add g_a and g_b to this action fact
    ]->
    [ Out('g'^~b)                               // Send out half key
    , BState(~idB, 'INSTALLED', <~b, g_a, k>)   // Save state
    ]

rule A_2:
    let
        k = g_b ^ ~a            // Symmetric encryption key (g^a^b = g^(ab))
        c = senc(~m, k)         // Encrypted message
    in
    [ AState(~idA, 'SENT', ~a)  // Recover state
    , In(g_b)                   // Receive Q's half key
    , Fr(~m)                    // Generate fresh message m (intended to be secret)
    ]
  --[ AInstallsKey(~idA, k)
    , ASendsMessage(~idA, k)
    , ASecret(~idA, ~m)
    ]->
    [ Out(c)
    , AState(~idA, 'INSTALLED', <~a, g_b, k>)
    ]

rule B_2:
    let
         
        c = senc(m, k)                          // Encrypted message
    in
    [ BState(~idB, 'INSTALLED', <~b, g_a, k>)   // Recover state
    , In(c)                                     // Receive encrypted message
    ]
  --[ BReceivesMessage(~idB, k)                       
    , BSecret(~idB, m)                            
    ]-> 
    [] 

/***********************/
/* Security properties */
/***********************/

lemma injective_agreement:
    "
        /* Whenever an agent receives a message with key k */
        All idB k #i.
        BReceivesMessage(idB, k) @i 
        ==>
        /* there is somebody who've sent it with the same key k */
        ( Ex idA #j.
          ASendsMessage(idA, k) @j & j < i
          /* and there is no other message sent to idB with key k (injective) */
          & not
            ( Ex #i2.
                BReceivesMessage(idB, k) @i2 & not( #i = #i2 )
            )
        )
    "

lemma secret_message:
    "
    /* Whenever two agents believe that a message is secret */
    All idA idB m #i #j.
    ASecret(idA, m) @i
    & BSecret(idB, m) @j
    ==>
    /* the attacker does indeed not know it */
    not(Ex #r. K(m) @r)
    "

lemma executable:
    exists-trace
    "
        Ex idB idA k #i #j.
        AInstallsKey(idA, k) @i
        & BInstallsKey(idB, k) @j
    "

end
