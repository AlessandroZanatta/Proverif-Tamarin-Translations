theory Toy1

/*
 * Protocol taken from: https://github.com/benjaminkiesl/tamarin_toy_protocol
 *
 *      A -> B: Na
 *      B -> A: Nb
 *      A -> B: 'ACK'  (A also computes a Session Key derived from the two nonces and goes to a DONE state)
 *      After the 'ACK', B computes the SK and goes to a DONE state
 */

begin
functions: KDF/2

/***********************/
/* Protocol definition */
/***********************/

rule Init:
    [ Fr(~idA)
    , Fr(~idB) 
    ]
    -->
    [ AState(~idA, 'INIT', 'EMPTY_STATE')
    , BState(~idB, 'INIT', 'EMPTY_STATE')
    ]

rule A_1:
    [ AState(~idA, 'INIT', 'EMPTY_STATE')
    , Fr(~Na)
    ]
    -->
    [ Out(~Na)
    , AState(~idA, 'SENT_NONCE', ~Na) 
    ]

rule B_1:
    [ BState(~idB, 'INIT', 'EMPTY_STATE')
    , In(Na)
    , Fr(~Nb)
    ]
    -->
    [ Out(~Nb)
    , BState(~idB, 'SENT_NONCE', <Na, ~Nb>)
    ]

rule A_2:
    let
        Ks = KDF(~Na, Nb) // Session key
    in
    [ AState(~idA, 'SENT_NONCE', ~Na) 
    , In(Nb)
    ]
    --[ AInstallsKey(~idA, ~Na, Nb, Ks) ]->
    [ Out('ACK')
    , AState(~idA, 'INSTALLED_KEY', <~Na, Nb, Ks>)
    ]

rule B_2:
    let
        Ks = KDF(Na, ~Nb) // Session key
    in
    [ BState(~idB, 'SENT_NONCE', <Na, ~Nb>)
    , In('ACK')
    ]
    --[ BInstallsKey(~idB, Na, ~Nb, Ks) ]->
    [ BState(~idB, 'INSTALLED_KEY', <Na, ~Nb, Ks>) ]

/*******************/
/* Security lemmas */
/*******************/

lemma executable:
    exists-trace
    "
    ∃ idA idB Na Nb Ks #i #j. 
    AInstallsKey(idA, Na, Nb, Ks) @i
    ∧ BInstallsKey(idB, Na, Nb, Ks) @j
    "

lemma secret_key_A:
    "
    ∀ idA Na Nb Ks #i.
    AInstallsKey(idA, Na, Nb, Ks) @i
    ==>
    ¬(∃ #j. K(Ks) @j)
    "

lemma secret_key_B:
    "
    ∀ idB Na Nb Ks #i.
    BInstallsKey(idB, Na, Nb, Ks) @i
    ==>
    ¬(∃ #j. K(Ks) @j)
    "

end
