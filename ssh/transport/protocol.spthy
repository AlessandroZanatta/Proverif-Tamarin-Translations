theory ssh_transport

/*
 * Status: Not working
 */

begin

builtins: hashing, signing, diffie-hellman, symmetric-encryption
functions: mac/2

/*******************/
/* Secure channels */
/*******************/

rule Out_C_to_S:
    [ Out_to_S($C, sid, x) ]
    --[ Out_C_to_S($C, sid, x) ]->
    [ !Secure_from_C($C, sid, x) ]

rule In_C_to_S:
    [ !Secure_from_C($C, sid, x) ]
    --[ In_C_to_S($C, sid, x) ]->
    [ In_from_C($C, sid, x) ]

rule Out_S_to_C:
    [ Out_to_C($S, sid, x) ]
    --[ Out_S_to_C($S, sid, x) ]->
    [ !Secure_from_S($S, sid, x) ]

rule In_S_to_C:
    [ !Secure_from_S($S, sid, x) ]
    --[ In_S_to_C($S, sid, x) ]->
    [ In_from_S($S, sid, x) ]

/*******/
/* PKI */
/*******/

rule RegisterSigningPublicKey:
    [ Fr(~sign_key) ]
  -->
    [ !Ltsk($X, ~sign_key), !Psk($X, pk(~sign_key)), Out(pk(~sign_key)) ]

/************/
/* Protocol */
/************/

// NOTICE: as this is a simplified version, it is assumed that we 
// are using an authenticated DH exchange, symmetric encryption,
// mac algorithm and no compression

rule C_1:
    let
        pubC = 'g'^~secretC                                     // Public DH half-key
    in
    [ Fr(~secretC) ]                                            // Generate fresh DH parameter
    --[ CSentDHParam($C, pubC) ]->
    [ Out(<'KEXDHINIT', pubC>)                                  // Send request to server 
    , CState($C, 'SENT_DH_PARAM', <~secretC>)
    ]

rule S_1:
    let 
        pubS = 'g'^~secretS
        key = pubC^~secretS
        hashed = h(<verification_key, pubC, pubS, key>)
        
        // Derive secrets from master key
        enc_key_C_to_S = h(<key, hashed, 'enc_key_C_to_S'>)
        enc_key_S_to_C = h(<key, hashed, 'enc_key_S_to_C'>)
        mac_key_C_to_S = h(<key, hashed, 'mac_key_C_to_S'>)
        mac_key_S_to_C = h(<key, hashed, 'mac_key_S_to_C'>)
        derived_keys = <enc_key_C_to_S, enc_key_S_to_C, mac_key_C_to_S, mac_key_S_to_C>
    in
    [ !Ltsk($S, sign_key)
    , !Psk($S, verification_key)
    , In(<'KEXDHINIT', pubC>)
    , Fr(~secretS)
    ]
  --[ SSentDHParam($S, pubS)
    , SInstallsKey($S, key)
    ]->
    [ Out(<'KEXDHREPLY', verification_key, pubS, sign(hashed, sign_key)>)
    , !SFinalState($S, 'KEY_INSTALLED', <~secretS, key, derived_keys>)
    ]

rule C_2:
    let 
        pubC = 'g'^~secretC
        key = pubS^~secretC
        hashed = h(<verification_key, pubC, pubS, key>)
        enc_key_C_to_S = h(<key, hashed, 'enc_key_C_to_S'>)
        enc_key_S_to_C = h(<key, hashed, 'enc_key_S_to_C'>)
        mac_key_C_to_S = h(<key, hashed, 'mac_key_C_to_S'>)
        mac_key_S_to_C = h(<key, hashed, 'mac_key_S_to_C'>)
        derived_keys = <enc_key_C_to_S, enc_key_S_to_C, mac_key_C_to_S, mac_key_S_to_C>
    in
    [ !Psk($S, verification_key)
    , CState($C, 'SENT_DH_PARAM', <~secretC>)
    , In(<'KEXDHREPLY', verification_key, pubS, signature>)
    , Fr(~client_secret)
    ]
  --[ Equal(verify(signature, hashed, verification_key), true)
    , CInstallsKey($C, key)
    , CSendsClientSecretToServer($C, ~client_secret)
    ]->
    [ Out_to_S($C, key, ~client_secret)
    , !CFinalState($C, 'KEY_INSTALLED', <~secretC, key, derived_keys>)
    ] 

   /*
    * Note that `key` was added in the In/Out_from_C/S rules
    * to identify the session correctly. This would otherwise 
    * lead to an false attack that used session mismatch.
    */

rule S_3_1:
    let
        derived_keys = <enc_key_C_to_S, enc_key_S_to_C, mac_key_C_to_S, mac_key_S_to_C>
    in
    [ !SFinalState($S, 'KEY_INSTALLED', <~secretS, key, derived_keys>)
    , In_from_C($C, key, m3payload)
    ]
    --[]->
    [ Out(<senc(m3payload, enc_key_S_to_C), mac(m3payload, mac_key_S_to_C)>) ]

rule S_3_2:
    let
        derived_keys = <enc_key_C_to_S, enc_key_S_to_C, mac_key_C_to_S, mac_key_S_to_C>
    in
    [ !SFinalState($S, 'KEY_INSTALLED', <~S_sign_key, ~secretS, key, derived_keys>)
    , In(<senc(m2payload, enc_key_C_to_S), mac(m2payload, mac_key_C_to_S)>)
    ]
    --[]->
    [ Out_to_C($S, key, m2payload) ]

rule C_3_1:
    let
        derived_keys = <enc_key_C_to_S, enc_key_S_to_C, mac_key_C_to_S, mac_key_S_to_C>
    in
    [ !CFinalState($C, 'KEY_INSTALLED', <S_pubkey, ~secretC, key, derived_keys>)
    , In_from_S($S, key, m2payload)
    ]
    --[]->
    [ Out(<senc(m2payload, enc_key_C_to_S), mac(m2payload, mac_key_C_to_S)>) ]

rule C_3_2:
    let
        derived_keys = <enc_key_C_to_S, enc_key_S_to_C, mac_key_C_to_S, mac_key_S_to_C>
    in
    [ !CFinalState($C, 'KEY_INSTALLED', <S_pubkey, ~secretC, key, derived_keys>)
    , In(<senc(m4payload, enc_key_S_to_C), mac(m4payload, mac_key_S_to_C)>)
    ]
    --[]->
    [ Out_to_S($C, key, m4payload) ]

restriction Equal:
    "
    All x y #NOW. Equal(x, y) @NOW ==> x = y
    "

/*******************/
/* Security lemmas */
/*******************/

// Finds an attack because of a 
lemma secret:
    "
    ∀ idC secret #i.
    CSendsClientSecretToServer(idC, secret) @i
    ==>
    ¬(
      ∃ #k. K(secret) @k
    )
    "

lemma executable:
    exists-trace
    "
    ∃ idC secret #s.
    CSendsClientSecretToServer(idC, secret) @s
    "

end
